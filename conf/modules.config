/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: GUNZIP_GTF {
        publishDir = [
            enabled: false
        ]
    }

    withName: GTF_TO_TABLE {
        publishDir = [
            [
                path: { "${params.outdir}/tables/annotation" },
                mode: params.publish_dir_mode,
                pattern: '*.anno.tsv'
            ]
        ]
        ext.args = "--feature-type '${params.features_gtf_feature_type}' --first-field '${params.features_gtf_table_first_field}'"
    }

    withName: VALIDATOR {
        publishDir = [
            enabled: false
        ]
        ext.args = "--sample_id_col '${params.observations_id_col}' --feature_id_col '${params.features_id_col}'"
    }

    withName: AFFY_JUSTRMA_RAW {
        publishDir = [
            [
                path: { "${params.outdir}/tables/processed_abundance" },
                mode: params.publish_dir_mode,
                pattern: '*.matrix.tsv'
            ],
            [
                path: { "${params.outdir}/tables/annotation" },
                mode: params.publish_dir_mode,
                pattern: '*.annotation.tsv'
            ],
            [
                path: { "${params.outdir}/other/affy" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,sessionInfo.log}'
            ]
        ]
        ext.prefix = { "raw." }
        ext.args = { [
            "--sample_name_col \"" + (params.observations_name_col == null ? params.observations_id_col : params.observations_name_col) + "\"",
            "--file_name_col \"${params.affy_file_name_col}\"",
            "--background ${params.affy_background}",
            "--normalize False",
            "--bgversion ${params.affy_bgversion}",
            "--destructive ${params.affy_destructive}",
            "--rm.mask ${params.affy_rm_mask}",
            "--rm.outliers ${params.affy_rm_outliers}",
            "--rm.extra ${params.affy_rm_extra}",
            "--build_annotation ${params.affy_build_annotation}"
        ].join(' ').trim() }
    }

    withName: AFFY_JUSTRMA_NORM {
        publishDir = [
            [
                path: { "${params.outdir}/tables/processed_abundance" },
                mode: params.publish_dir_mode,
                pattern: '*.matrix.tsv'
            ],
        ]
        ext.prefix = { "normalised." }
        ext.args = { [
            "--sample_name_col \"" + (params.observations_name_col == null ? params.observations_id_col : params.observations_name_col) + "\"",
            "--file_name_col \"${params.affy_file_name_col}\"",
            "--background ${params.affy_background}",
            "--normalize True",
            "--bgversion ${params.affy_bgversion}",
            "--destructive ${params.affy_destructive}",
            "--rm.mask ${params.affy_rm_mask}",
            "--rm.outliers ${params.affy_rm_outliers}",
            "--rm.extra ${params.affy_rm_extra}",
            "--build_annotation ${params.affy_build_annotation}"
        ].join(' ').trim() }
    }

    withName: PROTEUS {
        publishDir = [
            [
                path: { "${params.outdir}/tables/proteus/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ],
            [
                path: { "${params.outdir}/plots/proteus/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.png'
            ],
            [
                path: { "${params.outdir}/other/proteus/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.rds'

            ],
            [
                path: { "${params.outdir}/other/proteus/" },
                mode: params.publish_dir_mode,
                pattern: '*sessionInfo.log'
            ]
        ]
        ext.args = { [
            "--contrast_variable \"${meta.id}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--protein_id_col \"${params.features_id_col}\"",
            "--measure_col_prefix \"${params.proteus_measurecol_prefix}\"",
            "--norm_function $params.proteus_norm_function",
            "--plotsd_method $params.proteus_plotsd_method",
            "--plotmv_loess $params.proteus_plotmv_loess",
            "--palette_name $params.proteus_palette_name",
            "--round_digits $params.report_round_digits"
        ].join(' ').trim() }
    }

    withName: GEOQUERY_GETGEO {
        publishDir = [
            [
                path: { "${params.outdir}/tables/processed_abundance" },
                mode: params.publish_dir_mode,
                pattern: '*.matrix.tsv'
            ],
            [
                path: { "${params.outdir}/tables/annotation" },
                mode: params.publish_dir_mode,
                pattern: '*.annotation.tsv'
            ],
            [
                path: { "${params.outdir}/other/affy" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,sessionInfo.log}'
            ]
        ]
        ext.prefix = { "normalised." }
        ext.args = {
            ((params.features_metadata_cols == null) ? '' : "--metacols \"${params.features_metadata_cols}\"")
        }
    }

    withName: DESEQ2_NORM {
        ext.prefix = 'all'
        publishDir = [
            [
                path: { "${params.outdir}/tables/processed_abundance" },
                mode: params.publish_dir_mode,
                pattern: '*.{normalised_counts,vst,rlog}.tsv'
            ],
        ]
        ext.args = { [
            "--gene_id_col \"${params.features_id_col}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--test $params.deseq2_test",
            "--fit_type $params.deseq2_fit_type",
            "--sf_type $params.deseq2_sf_type",
            "--min_replicates_for_replace $params.deseq2_min_replicates_for_replace",
            "--use_t $params.deseq2_use_t",
            "--lfc_threshold $params.deseq2_lfc_threshold",
            "--alt_hypothesis $params.deseq2_alt_hypothesis",
            "--independent_filtering $params.deseq2_independent_filtering",
            "--p_adjust_method $params.deseq2_p_adjust_method",
            "--alpha $params.deseq2_alpha",
            "--minmu $params.deseq2_minmu",
            "--vs_method $params.deseq2_vs_method",
            "--vs_blind $params.deseq2_vs_blind",
            "--vst_nsub $params.deseq2_vst_nsub",
            "--shrink_lfc $params.deseq2_shrink_lfc",
            "--cores $params.deseq2_cores",
            "--subset_to_contrast_samples $params.differential_subset_to_contrast_samples",
            ((meta.blocking == null) ? '' : "--blocking_variables $meta.blocking"),
        ].join(' ').trim() }
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:DESEQ2_DIFFERENTIAL' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/tables/differential" },
                mode: params.publish_dir_mode,
                pattern: '*.deseq2.results.tsv'
            ],
            [
                path: { "${params.outdir}/plots/qc" },
                mode: params.publish_dir_mode,
                pattern: '*.png'
            ],
            [
                path: { "${params.outdir}/other/deseq2" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,sizefactors.tsv,sessionInfo.log}'
            ]
        ]
        ext.args = { [
            "--gene_id_col \"${params.features_id_col}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--test $params.deseq2_test",
            "--fit_type $params.deseq2_fit_type",
            "--sizefactors_from_controls $params.sizefactors_from_controls",
            "--sf_type $params.deseq2_sf_type",
            "--min_replicates_for_replace $params.deseq2_min_replicates_for_replace",
            "--use_t $params.deseq2_use_t",
            "--lfc_threshold $params.deseq2_lfc_threshold",
            "--alt_hypothesis $params.deseq2_alt_hypothesis",
            "--independent_filtering $params.deseq2_independent_filtering",
            "--p_adjust_method $params.deseq2_p_adjust_method",
            "--alpha $params.deseq2_alpha",
            "--minmu $params.deseq2_minmu",
            "--vs_method $params.deseq2_vs_method",
            "--vs_blind $params.deseq2_vs_blind",
            "--vst_nsub $params.deseq2_vst_nsub",
            "--shrink_lfc $params.deseq2_shrink_lfc",
            "--cores $params.deseq2_cores",
            "--subset_to_contrast_samples $params.differential_subset_to_contrast_samples",
            ((meta.blocking == null) ? '' : "--blocking_variables $meta.blocking"),
            ((meta.exclude_samples_col == null) ? '' : "--exclude_samples_col $meta.exclude_samples_col"),
            ((meta.exclude_samples_values == null) ? '' : "--exclude_samples_values $meta.exclude_samples_values")
        ].join(' ').trim() }
    }

    withName: LIMMA_DIFFERENTIAL {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/tables/differential" },
                mode: params.publish_dir_mode,
                pattern: '*.limma.results.tsv'
            ],
            [
                path: { "${params.outdir}/plots/qc" },
                mode: params.publish_dir_mode,
                pattern: '*.png'
            ],
            [
                path: { "${params.outdir}/other/limma" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,sessionInfo.log}'
            ]
        ]
        ext.args = { [
            "--probe_id_col \"${params.features_id_col}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--ndups \"${params.limma_ndups}\"",
            "--spacing \"${params.limma_spacing}\"",
            "--block \"${params.limma_block}\"",
            "--correlation ${params.limma_correlation}",
            "--method \"${params.limma_method}\"",
            "--proportion ${params.limma_proportion}",
            "--stdev.coef.lim \"${params.limma_stdev_coef_lim}\"",
            "--trend ${params.limma_trend}",
            "--robust ${params.limma_robust}",
            "--winsor.tail.p \"${params.limma_winsor_tail_p}\"",
            "--p.value ${params.limma_p_value}",
            "--lfc ${params.limma_lfc}",
            "--confint ${params.limma_confint}",
            "--subset_to_contrast_samples $params.differential_subset_to_contrast_samples",
            ((meta.blocking == null) ? '' : "--blocking_variables $meta.blocking"),
            ((meta.exclude_samples_col == null) ? '' : "--exclude_samples_col $meta.exclude_samples_col"),
            ((meta.exclude_samples_values == null) ? '' : "--exclude_samples_values $meta.exclude_samples_values")
        ].join(' ').trim() }
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:FILTER_DIFFTABLE' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            [
                path: { "${params.outdir}/tables/differential" },
                mode: params.publish_dir_mode,
                pattern: '*_filtered.tsv'
            ]
        ]
    }

    withName: GSEA_GSEA {
        ext.prefix = { "${meta.id}.${gene_sets.baseName}." }
        publishDir = [
            [
                path: { "${params.outdir}/report/gsea/${meta.id}/${gene_sets.baseName}" },
                mode: params.publish_dir_mode,
                pattern: '*.{html,zip,png,tsv,rpt}'
            ]
        ]
        ext.args = { [
            "-nperm $params.gsea_nperm",
            "-permute $params.gsea_permute",
            "-scoring_scheme $params.gsea_scoring_scheme",
            "-metric $params.gsea_metric",
            "-sort $params.gsea_sort",
            "-order $params.gsea_order",
            "-set_max $params.gsea_set_max",
            "-set_min $params.gsea_set_min",
            "-norm $params.gsea_norm",
            "-rnd_type $params.gsea_rnd_type",
            "-make_sets $params.gsea_make_sets",
            "-median $params.gsea_median",
            "-num $params.gsea_num",
            "-plot_top_x $params.gsea_plot_top_x",
            "-rnd_seed $params.gsea_rnd_seed",
            "-save_rnd_lists $params.gsea_save_rnd_lists",
            "-zip_report $params.gsea_zip_report"
        ].join(' ').trim() }
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:GPROFILER2_GOST' {
        publishDir = [
            [
                path: { "${params.outdir}/tables/gprofiler2/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.tsv'
            ],
            [
                path: { "${params.outdir}/plots/gprofiler2/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.{png,html}'
            ],
            [
                path: { "${params.outdir}/other/gprofiler2/${meta.id}/" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,gmt}'
            ],
            [
                path: { "${params.outdir}/other/gprofiler2/" },
                mode: params.publish_dir_mode,
                pattern: '*.{rds,sessionInfo.log}'
            ]
        ]
        ext.args = { [
            "--significant \"${params.gprofiler2_significant}\"",
            "--measure_underrepresentation \"${params.gprofiler2_measure_underrepresentation}\"",
            "--correction_method \"${params.gprofiler2_correction_method}\"",
            "--evcodes \"${params.gprofiler2_evcodes}\"",
            "--pval_threshold \"${params.gprofiler2_max_qval}\"",
            "--domain_scope ${params.gprofiler2_domain_scope}",
            "--min_diff \"${params.gprofiler2_min_diff}\"",
            "--round_digits ${params.report_round_digits}",
            "--palette_name \"${params.gprofiler2_palette_name}\"",
            ((params.differential_feature_id_column == null) ? '' : "--de_id_column \"${params.differential_feature_id_column}\""),
            ((params.gprofiler2_token == null) ? '' : "--token \"${params.gprofiler2_token}\""),
            ((params.gprofiler2_organism == null) ? '' : "--organism \"${params.gprofiler2_organism}\""),
            ((params.gprofiler2_background_column == null) ? '' : "--background_column \"${params.gprofiler2_background_column}\""),
            ((params.gprofiler2_sources == null) ? '' : "--sources \"${params.gprofiler2_sources}\"")
        ].join(' ').trim() }
    }

    withName: PLOT_EXPLORATORY {
        publishDir = [
            path: { "${params.outdir}/plots/exploratory" },
            mode: params.publish_dir_mode,
        ]
        memory = { 12.GB * task.attempt }
        ext.args = { [
            "--sample_id_col \"${params.observations_id_col}\"",
            "--feature_id_col \"${params.features_id_col}\"",
            "--assay_names \"${params.exploratory_assay_names}\"",
            "--final_assay \"${params.exploratory_final_assay}\"",
            "--outlier_mad_threshold ${params.exploratory_mad_threshold}",
            "--palette_name \"${params.exploratory_palette_name}\"",
            ( (params.study_type == 'maxquant') ? "--log2_assays ''" : (((params.exploratory_log2_assays == null) ? '' : "--log2_assays \"$params.exploratory_log2_assays\"".replace('[', '').replace(']', ''))) )
        ].join(' ').trim() }
    }

    withName: PLOT_DIFFERENTIAL {
        publishDir = [
            path: { "${params.outdir}/plots/differential" },
            mode: params.publish_dir_mode,
        ]
        memory = { 12.GB * task.attempt }
        ext.args = { [
            "--feature_id_col \"${params.features_id_col}\"",
            "--reference_level \"$meta.reference\"",
            "--treatment_level \"$meta.target\"",
            "--fold_change_col \"${params.differential_fc_column}\"",
            "--p_value_column \"${params.differential_qval_column}\"",
            "--diff_feature_id_col \"${params.differential_feature_id_column}\"",
            "--fold_change_threshold \"${params.differential_min_fold_change}\"",
            "--p_value_threshold \"${params.differential_max_qval}\"",
            "--unlog_foldchanges \"${params.differential_foldchanges_logged}\"",
            "--palette_name \"${params.differential_palette_name}\""
        ].join(' ').trim() }
    }

    withName: SHINYNGS_APP {
        secret = (params.shinyngs_deploy_to_shinyapps_io) ? [ 'SHINYAPPS_TOKEN', 'SHINYAPPS_SECRET' ]: null

        publishDir = [
            path: { "${params.outdir}/shinyngs_app" },
            mode: params.publish_dir_mode,
        ]
        memory = { 12.GB * task.attempt }
        ext.args = { [
            "--assay_names \"${params.exploratory_assay_names}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--feature_id_col \"${params.features_id_col}\"",
            "--feature_name_col \"" + (params.features_name_col == null ? params.features_id_col : params.features_name_col) + "\"",
            "--diff_feature_id_col \"${params.differential_feature_id_column}\"",
            "--fold_change_column \"${params.differential_fc_column}\"",
            "--pval_column \"${params.differential_pval_column}\"",
            "--qval_column \"${params.differential_qval_column}\"",
            "--unlog_foldchanges \"${params.differential_foldchanges_logged}\"",
            ((params.report_title == null) ? '' : "--title \"$params.report_title\""),
            ((params.report_author == null) ? '' : "--author \"$params.report_author\""),
            ((params.report_description == null) ? '' : "--description \"$params.report_description\""),
            ( (params.study_type == 'maxquant') ? "--log2_assays ''" : (((params.exploratory_log2_assays == null) ? '' : "--log2_assays \"$params.exploratory_log2_assays\"".replace('[', '').replace(']', ''))) ),
            ((params.shinyngs_deploy_to_shinyapps_io) ? "--deploy_app" : ''),
            ((params.shinyngs_shinyapps_account == null) ? '' : "--shinyapps_account \"$params.shinyngs_shinyapps_account\""),
            ((params.shinyngs_shinyapps_app_name == null) ? '' : "--shinyapps_name \"$params.shinyngs_shinyapps_app_name\"")
        ].join(' ').trim() }
    }

    withName: RMARKDOWNNOTEBOOK {
        conda = "bioconda::r-shinyngs=1.8.8"
        container = { "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/r-shinyngs:1.8.8--r43hdfd78af_0' : 'biocontainers/r-shinyngs:1.8.8--r43hdfd78af_0' }" }
        publishDir = [
            [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                pattern: '*.html'
            ]
        ]
    }

    withName: MAKE_REPORT_BUNDLE {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            pattern: '*.zip'
        ]
    }

    withName: CUSTOM_MATRIXFILTER {
        publishDir = [
            enabled: false
        ]
        ext.prefix = { "${meta.id}" }
        ext.args   = [
            "--sample_id_col \"${params.observations_id_col}\"",
            "--minimum_samples ${params.filtering_min_samples}",
            "--minimum_abundance ${params.filtering_min_abundance}",
            (params.filtering_min_proportion ? "--minimum_proportion ${params.filtering_min_proportion}" : ''),
            (params.filtering_grouping_var ? "--grouping_variable \"${params.filtering_grouping_var}\"" : ''),
            (params.filtering_min_proportion_not_na ? "--minimum_proportion_not_na \"${params.filtering_min_proportion_not_na}\"" : ''),
            (params.filtering_min_samples_not_na ? "--minimum_samples_not_na \"${params.filtering_min_samples_not_na}\"" : '')
        ].join(' ').trim()
    }

    withName: 'CUSTOM_TABULARTOGSEACLS' {
        publishDir = [
            enabled: false
        ]
        ext.args = { [ "separator": "\t", "variable": "$meta.variable" ] }
    }

    withName: 'CUSTOM_TABULARTOGSEAGCT' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'TABULAR_TO_GSEA_CHIP' {
        publishDir = [
            enabled: false
        ]
    }

    // TODO
    // for the moment, the parameters from toolsheet are parsed here.
    // For the repeated arguments, since the R argument parser will only take the first one,
    // here I add the toolsheet arguments at the beginning of ext.args to make sure they are
    // taken into account instead of the default options.
    // However, later we need to better handle this, maybe by a bit of groovy scripting to
    // overwrite the repeated parameters (?)

    withName: PROPR {
        tag = { [
            "$meta.id",
            (meta.args_cor ? "args_cor = $meta.args_cor" : '')
        ].join(',').trim() }
        ext.args = { [
            (meta.args_cor ? "${meta.args_cor}" : ''),
            "--features_id_col ${params.features_id_col}",
            "--metric ${params.propr_metric}",
            "--ivar ${params.propr_ivar}",
            (params.propr_alpha ? "--alpha ${params.propr_alpha}" : ''),
            "--fdr ${params.propr_fdr}",
            "--tails ${params.propr_tails}",
            "--permutation ${params.propr_permutation}",
            "--number_of_cutoffs ${params.propr_ncutoffs}"
        ].join(' ').trim() }
        publishDir = [
            path: {
                meta.args_cor ? "${params.outdir}/correlation_analysis/propr-${meta.args_cor.replace('--','').replace(' ', '_')}" :
                                "${params.outdir}/correlation_analysis/propr"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PROPD {
        tag = { [
            "$meta.id",
            "$meta.contrast",
            (meta.args_diff ? "args_diff = $meta.args_diff" : '')
        ].join(',').trim() }
        ext.args = { [
            (meta.args_diff ? "${meta.args_diff}" : ''),
            "--features_id_col ${params.features_id_col}",
            "--obs_id_col ${params.observations_id_col}",
            (params.propd_alpha ? "--alpha ${params.propd_alpha}" : ''),
            "--moderated ${params.propd_moderated}",
            "--fdr ${params.propd_fdr}",
            "--permutation ${params.propd_permutation}",
            "--number_of_cutoffs ${params.propd_ncutoffs}",
            "--weighted_degree ${params.propd_weighted_degree}"
        ].join(' ').trim() }
        publishDir = [
            path: {
                meta.args_diff ? "${params.outdir}/differential_analysis/propd-${meta.args_diff.replace('--','').replace(' ', '_')}/${meta.contrast}" :
                                "${params.outdir}/differential_analysis/propd/${meta.contrast}"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:EXPERIMENTAL:DIFFERENTIAL:DESEQ2' {
        tag = { [
            "$meta.id",
            "$meta.contrast",
            (meta.args_diff ? "args_diff = $meta.args_diff" : '')
        ].join(',').trim() }
        publishDir = [
            path: {
                meta.args_diff ? "${params.outdir}/differential_analysis/deseq2-${meta.args_diff.replace('--','').replace(' ', '_')}/${meta.contrast}" :
                                "${params.outdir}/differential_analysis/deseq2/${meta.contrast}"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { [
            (meta.args_diff ? "${meta.args_diff}" : ''),
            "--gene_id_col \"${params.features_id_col}\"",
            "--sample_id_col \"${params.observations_id_col}\"",
            "--test $params.deseq2_test",
            "--fit_type $params.deseq2_fit_type",
            "--sizefactors_from_controls $params.sizefactors_from_controls",
            "--sf_type $params.deseq2_sf_type",
            "--min_replicates_for_replace $params.deseq2_min_replicates_for_replace",
            "--use_t $params.deseq2_use_t",
            "--lfc_threshold $params.deseq2_lfc_threshold",
            "--alt_hypothesis $params.deseq2_alt_hypothesis",
            "--independent_filtering $params.deseq2_independent_filtering",
            "--p_adjust_method $params.deseq2_p_adjust_method",
            "--alpha $params.deseq2_alpha",
            "--minmu $params.deseq2_minmu",
            "--vs_method $params.deseq2_vs_method",
            "--vs_blind $params.deseq2_vs_blind",
            "--vst_nsub $params.deseq2_vst_nsub",
            "--shrink_lfc $params.deseq2_shrink_lfc",
            "--cores $params.deseq2_cores",
            "--subset_to_contrast_samples $params.differential_subset_to_contrast_samples",
            ((meta.blocking == null) ? '' : "--blocking_variables $meta.blocking"),
            ((meta.exclude_samples_col == null) ? '' : "--exclude_samples_col $meta.exclude_samples_col"),
            ((meta.exclude_samples_values == null) ? '' : "--exclude_samples_values $meta.exclude_samples_values")
        ].join(' ').trim() }
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:EXPERIMENTAL:DIFFERENTIAL:FILTER_DESEQ2' {
        publishDir = [
            path: {
                meta.args_diff ? "${params.outdir}/differential_analysis/deseq2-${meta.args_diff.replace('--','').replace(' ', '_')}/${meta.contrast}" :
                                "${params.outdir}/differential_analysis/deseq2/${meta.contrast}"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MYGENE {
        ext.args = [
            "--columname ${params.features_id_col}"
        ].join(' ').trim()
        publishDir = [
            path: "${params.outdir}/enrichment_analysis/mygene",
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GREA {
        tag = { [
            "$meta.id",
            (meta.contrast ? "$meta.contrast" : ''),
            (meta.args_enr ? "args_enr = $meta.args_enr" : '')
        ].join(',').trim() }
        ext.args = { [
            (meta.args_enr ? "${meta.args_enr}" : ''),
            "--set_min ${params.grea_set_min}",
            "--set_max ${params.grea_set_max}",
            "--permutation ${params.grea_permutation}"
        ].join(' ').trim() }
        publishDir = [
            path: {
                meta.args_enr ? "${params.outdir}/enrichment_analysis/grea-${meta.args_enr.replace('--','').replace(' ', '_')}" :
                                "${params.outdir}/enrichment_analysis/grea"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        publishDir = [
            path: { "${params.outdir}/enrichment_analysis/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'NFCORE_DIFFERENTIALABUNDANCE:DIFFERENTIALABUNDANCE:EXPERIMENTAL:ENRICHMENT:GPROFILER2_GOST' {
        tag = { [
            "$meta.id",
            (meta.contrast ? "$meta.contrast" : ''),
            (meta.args_enr ? "args_enr = $meta.args_enr" : '')
        ].join(',').trim() }
        publishDir = [
            path: {
                meta.args_enr ? "${params.outdir}/enrichment_analysis/gprofiler2-${meta.args_enr.replace('--','').replace(' ', '_')}" :
                                "${params.outdir}/enrichment_analysis/gprofiler2"
            },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = { [
            "--significant \"${params.gprofiler2_significant}\"",
            "--measure_underrepresentation \"${params.gprofiler2_measure_underrepresentation}\"",
            "--correction_method \"${params.gprofiler2_correction_method}\"",
            "--evcodes \"${params.gprofiler2_evcodes}\"",
            "--pval_threshold \"${params.gprofiler2_max_qval}\"",
            "--domain_scope ${params.gprofiler2_domain_scope}",
            "--min_diff \"${params.gprofiler2_min_diff}\"",
            "--round_digits ${params.report_round_digits}",
            "--palette_name \"${params.gprofiler2_palette_name}\"",
            ((params.differential_feature_id_column == null) ? '' : "--de_id_column \"${params.differential_feature_id_column}\""),
            ((params.gprofiler2_token == null) ? '' : "--token \"${params.gprofiler2_token}\""),
            ((params.gprofiler2_organism == null) ? '' : "--organism \"${params.gprofiler2_organism}\""),
            ((params.gprofiler2_background_column == null) ? '' : "--background_column \"${params.gprofiler2_background_column}\""),
            ((params.gprofiler2_sources == null) ? '' : "--sources \"${params.gprofiler2_sources}\"")
        ].join(' ').trim() }
    }

}
